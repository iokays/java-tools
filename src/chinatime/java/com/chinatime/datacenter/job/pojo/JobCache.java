/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chinatime.datacenter.job.pojo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class JobCache implements org.apache.thrift.TBase<JobCache, JobCache._Fields>, java.io.Serializable, Cloneable, Comparable<JobCache> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobCache");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pageId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLISHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("edge", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_S_FIELD_DESC = new org.apache.thrift.protocol.TField("minS", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_S_FIELD_DESC = new org.apache.thrift.protocol.TField("maxS", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DUTY_FIELD_DESC = new org.apache.thrift.protocol.TField("duty", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_EDU_FIELD_DESC = new org.apache.thrift.protocol.TField("lastEdu", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("requirement", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField WELFARE_FIELD_DESC = new org.apache.thrift.protocol.TField("welfare", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobCacheStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobCacheTupleSchemeFactory());
  }

  /**
   * 职位ID
   */
  public String id; // optional
  /**
   * 职位所属机构ID
   */
  public String orgId; // optional
  /**
   * 职位所属PageId
   */
  public String pageId; // optional
  /**
   * 职位发布者Id
   */
  public String publisherId; // optional
  /**
   * 职位名称
   */
  public String name; // optional
  /**
   * 职位优势
   */
  public String edge; // optional
  /**
   * 最低月薪
   */
  public int minS; // optional
  /**
   * 最高月薪
   */
  public int maxS; // optional
  /**
   * 工作经验
   */
  public String experience; // optional
  /**
   * 工作职能
   */
  public String duty; // optional
  /**
   * 学历要求
   */
  public String lastEdu; // optional
  /**
   * 职位描述
   */
  public String desc; // optional
  /**
   * 申请条件
   */
  public String requirement; // optional
  /**
   * 福利
   */
  public String welfare; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 职位ID
     */
    ID((short)1, "id"),
    /**
     * 职位所属机构ID
     */
    ORG_ID((short)2, "orgId"),
    /**
     * 职位所属PageId
     */
    PAGE_ID((short)3, "pageId"),
    /**
     * 职位发布者Id
     */
    PUBLISHER_ID((short)4, "publisherId"),
    /**
     * 职位名称
     */
    NAME((short)5, "name"),
    /**
     * 职位优势
     */
    EDGE((short)6, "edge"),
    /**
     * 最低月薪
     */
    MIN_S((short)7, "minS"),
    /**
     * 最高月薪
     */
    MAX_S((short)8, "maxS"),
    /**
     * 工作经验
     */
    EXPERIENCE((short)9, "experience"),
    /**
     * 工作职能
     */
    DUTY((short)10, "duty"),
    /**
     * 学历要求
     */
    LAST_EDU((short)11, "lastEdu"),
    /**
     * 职位描述
     */
    DESC((short)12, "desc"),
    /**
     * 申请条件
     */
    REQUIREMENT((short)13, "requirement"),
    /**
     * 福利
     */
    WELFARE((short)14, "welfare");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ORG_ID
          return ORG_ID;
        case 3: // PAGE_ID
          return PAGE_ID;
        case 4: // PUBLISHER_ID
          return PUBLISHER_ID;
        case 5: // NAME
          return NAME;
        case 6: // EDGE
          return EDGE;
        case 7: // MIN_S
          return MIN_S;
        case 8: // MAX_S
          return MAX_S;
        case 9: // EXPERIENCE
          return EXPERIENCE;
        case 10: // DUTY
          return DUTY;
        case 11: // LAST_EDU
          return LAST_EDU;
        case 12: // DESC
          return DESC;
        case 13: // REQUIREMENT
          return REQUIREMENT;
        case 14: // WELFARE
          return WELFARE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINS_ISSET_ID = 0;
  private static final int __MAXS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ORG_ID,_Fields.PAGE_ID,_Fields.PUBLISHER_ID,_Fields.NAME,_Fields.EDGE,_Fields.MIN_S,_Fields.MAX_S,_Fields.EXPERIENCE,_Fields.DUTY,_Fields.LAST_EDU,_Fields.DESC,_Fields.REQUIREMENT,_Fields.WELFARE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("pageId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISHER_ID, new org.apache.thrift.meta_data.FieldMetaData("publisherId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EDGE, new org.apache.thrift.meta_data.FieldMetaData("edge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_S, new org.apache.thrift.meta_data.FieldMetaData("minS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_S, new org.apache.thrift.meta_data.FieldMetaData("maxS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUTY, new org.apache.thrift.meta_data.FieldMetaData("duty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_EDU, new org.apache.thrift.meta_data.FieldMetaData("lastEdu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("requirement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WELFARE, new org.apache.thrift.meta_data.FieldMetaData("welfare", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobCache.class, metaDataMap);
  }

  public JobCache() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobCache(JobCache other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetOrgId()) {
      this.orgId = other.orgId;
    }
    if (other.isSetPageId()) {
      this.pageId = other.pageId;
    }
    if (other.isSetPublisherId()) {
      this.publisherId = other.publisherId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEdge()) {
      this.edge = other.edge;
    }
    this.minS = other.minS;
    this.maxS = other.maxS;
    if (other.isSetExperience()) {
      this.experience = other.experience;
    }
    if (other.isSetDuty()) {
      this.duty = other.duty;
    }
    if (other.isSetLastEdu()) {
      this.lastEdu = other.lastEdu;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetRequirement()) {
      this.requirement = other.requirement;
    }
    if (other.isSetWelfare()) {
      this.welfare = other.welfare;
    }
  }

  public JobCache deepCopy() {
    return new JobCache(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.orgId = null;
    this.pageId = null;
    this.publisherId = null;
    this.name = null;
    this.edge = null;
    setMinSIsSet(false);
    this.minS = 0;
    setMaxSIsSet(false);
    this.maxS = 0;
    this.experience = null;
    this.duty = null;
    this.lastEdu = null;
    this.desc = null;
    this.requirement = null;
    this.welfare = null;
  }

  /**
   * 职位ID
   */
  public String getId() {
    return this.id;
  }

  /**
   * 职位ID
   */
  public JobCache setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 职位所属机构ID
   */
  public String getOrgId() {
    return this.orgId;
  }

  /**
   * 职位所属机构ID
   */
  public JobCache setOrgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  public void unsetOrgId() {
    this.orgId = null;
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return this.orgId != null;
  }

  public void setOrgIdIsSet(boolean value) {
    if (!value) {
      this.orgId = null;
    }
  }

  /**
   * 职位所属PageId
   */
  public String getPageId() {
    return this.pageId;
  }

  /**
   * 职位所属PageId
   */
  public JobCache setPageId(String pageId) {
    this.pageId = pageId;
    return this;
  }

  public void unsetPageId() {
    this.pageId = null;
  }

  /** Returns true if field pageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPageId() {
    return this.pageId != null;
  }

  public void setPageIdIsSet(boolean value) {
    if (!value) {
      this.pageId = null;
    }
  }

  /**
   * 职位发布者Id
   */
  public String getPublisherId() {
    return this.publisherId;
  }

  /**
   * 职位发布者Id
   */
  public JobCache setPublisherId(String publisherId) {
    this.publisherId = publisherId;
    return this;
  }

  public void unsetPublisherId() {
    this.publisherId = null;
  }

  /** Returns true if field publisherId is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisherId() {
    return this.publisherId != null;
  }

  public void setPublisherIdIsSet(boolean value) {
    if (!value) {
      this.publisherId = null;
    }
  }

  /**
   * 职位名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 职位名称
   */
  public JobCache setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 职位优势
   */
  public String getEdge() {
    return this.edge;
  }

  /**
   * 职位优势
   */
  public JobCache setEdge(String edge) {
    this.edge = edge;
    return this;
  }

  public void unsetEdge() {
    this.edge = null;
  }

  /** Returns true if field edge is set (has been assigned a value) and false otherwise */
  public boolean isSetEdge() {
    return this.edge != null;
  }

  public void setEdgeIsSet(boolean value) {
    if (!value) {
      this.edge = null;
    }
  }

  /**
   * 最低月薪
   */
  public int getMinS() {
    return this.minS;
  }

  /**
   * 最低月薪
   */
  public JobCache setMinS(int minS) {
    this.minS = minS;
    setMinSIsSet(true);
    return this;
  }

  public void unsetMinS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINS_ISSET_ID);
  }

  /** Returns true if field minS is set (has been assigned a value) and false otherwise */
  public boolean isSetMinS() {
    return EncodingUtils.testBit(__isset_bitfield, __MINS_ISSET_ID);
  }

  public void setMinSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINS_ISSET_ID, value);
  }

  /**
   * 最高月薪
   */
  public int getMaxS() {
    return this.maxS;
  }

  /**
   * 最高月薪
   */
  public JobCache setMaxS(int maxS) {
    this.maxS = maxS;
    setMaxSIsSet(true);
    return this;
  }

  public void unsetMaxS() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXS_ISSET_ID);
  }

  /** Returns true if field maxS is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxS() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXS_ISSET_ID);
  }

  public void setMaxSIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXS_ISSET_ID, value);
  }

  /**
   * 工作经验
   */
  public String getExperience() {
    return this.experience;
  }

  /**
   * 工作经验
   */
  public JobCache setExperience(String experience) {
    this.experience = experience;
    return this;
  }

  public void unsetExperience() {
    this.experience = null;
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return this.experience != null;
  }

  public void setExperienceIsSet(boolean value) {
    if (!value) {
      this.experience = null;
    }
  }

  /**
   * 工作职能
   */
  public String getDuty() {
    return this.duty;
  }

  /**
   * 工作职能
   */
  public JobCache setDuty(String duty) {
    this.duty = duty;
    return this;
  }

  public void unsetDuty() {
    this.duty = null;
  }

  /** Returns true if field duty is set (has been assigned a value) and false otherwise */
  public boolean isSetDuty() {
    return this.duty != null;
  }

  public void setDutyIsSet(boolean value) {
    if (!value) {
      this.duty = null;
    }
  }

  /**
   * 学历要求
   */
  public String getLastEdu() {
    return this.lastEdu;
  }

  /**
   * 学历要求
   */
  public JobCache setLastEdu(String lastEdu) {
    this.lastEdu = lastEdu;
    return this;
  }

  public void unsetLastEdu() {
    this.lastEdu = null;
  }

  /** Returns true if field lastEdu is set (has been assigned a value) and false otherwise */
  public boolean isSetLastEdu() {
    return this.lastEdu != null;
  }

  public void setLastEduIsSet(boolean value) {
    if (!value) {
      this.lastEdu = null;
    }
  }

  /**
   * 职位描述
   */
  public String getDesc() {
    return this.desc;
  }

  /**
   * 职位描述
   */
  public JobCache setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  /**
   * 申请条件
   */
  public String getRequirement() {
    return this.requirement;
  }

  /**
   * 申请条件
   */
  public JobCache setRequirement(String requirement) {
    this.requirement = requirement;
    return this;
  }

  public void unsetRequirement() {
    this.requirement = null;
  }

  /** Returns true if field requirement is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirement() {
    return this.requirement != null;
  }

  public void setRequirementIsSet(boolean value) {
    if (!value) {
      this.requirement = null;
    }
  }

  /**
   * 福利
   */
  public String getWelfare() {
    return this.welfare;
  }

  /**
   * 福利
   */
  public JobCache setWelfare(String welfare) {
    this.welfare = welfare;
    return this;
  }

  public void unsetWelfare() {
    this.welfare = null;
  }

  /** Returns true if field welfare is set (has been assigned a value) and false otherwise */
  public boolean isSetWelfare() {
    return this.welfare != null;
  }

  public void setWelfareIsSet(boolean value) {
    if (!value) {
      this.welfare = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((String)value);
      }
      break;

    case PAGE_ID:
      if (value == null) {
        unsetPageId();
      } else {
        setPageId((String)value);
      }
      break;

    case PUBLISHER_ID:
      if (value == null) {
        unsetPublisherId();
      } else {
        setPublisherId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case EDGE:
      if (value == null) {
        unsetEdge();
      } else {
        setEdge((String)value);
      }
      break;

    case MIN_S:
      if (value == null) {
        unsetMinS();
      } else {
        setMinS((Integer)value);
      }
      break;

    case MAX_S:
      if (value == null) {
        unsetMaxS();
      } else {
        setMaxS((Integer)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((String)value);
      }
      break;

    case DUTY:
      if (value == null) {
        unsetDuty();
      } else {
        setDuty((String)value);
      }
      break;

    case LAST_EDU:
      if (value == null) {
        unsetLastEdu();
      } else {
        setLastEdu((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case REQUIREMENT:
      if (value == null) {
        unsetRequirement();
      } else {
        setRequirement((String)value);
      }
      break;

    case WELFARE:
      if (value == null) {
        unsetWelfare();
      } else {
        setWelfare((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ORG_ID:
      return getOrgId();

    case PAGE_ID:
      return getPageId();

    case PUBLISHER_ID:
      return getPublisherId();

    case NAME:
      return getName();

    case EDGE:
      return getEdge();

    case MIN_S:
      return getMinS();

    case MAX_S:
      return getMaxS();

    case EXPERIENCE:
      return getExperience();

    case DUTY:
      return getDuty();

    case LAST_EDU:
      return getLastEdu();

    case DESC:
      return getDesc();

    case REQUIREMENT:
      return getRequirement();

    case WELFARE:
      return getWelfare();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ORG_ID:
      return isSetOrgId();
    case PAGE_ID:
      return isSetPageId();
    case PUBLISHER_ID:
      return isSetPublisherId();
    case NAME:
      return isSetName();
    case EDGE:
      return isSetEdge();
    case MIN_S:
      return isSetMinS();
    case MAX_S:
      return isSetMaxS();
    case EXPERIENCE:
      return isSetExperience();
    case DUTY:
      return isSetDuty();
    case LAST_EDU:
      return isSetLastEdu();
    case DESC:
      return isSetDesc();
    case REQUIREMENT:
      return isSetRequirement();
    case WELFARE:
      return isSetWelfare();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobCache)
      return this.equals((JobCache)that);
    return false;
  }

  public boolean equals(JobCache that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_orgId = true && this.isSetOrgId();
    boolean that_present_orgId = true && that.isSetOrgId();
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (!this.orgId.equals(that.orgId))
        return false;
    }

    boolean this_present_pageId = true && this.isSetPageId();
    boolean that_present_pageId = true && that.isSetPageId();
    if (this_present_pageId || that_present_pageId) {
      if (!(this_present_pageId && that_present_pageId))
        return false;
      if (!this.pageId.equals(that.pageId))
        return false;
    }

    boolean this_present_publisherId = true && this.isSetPublisherId();
    boolean that_present_publisherId = true && that.isSetPublisherId();
    if (this_present_publisherId || that_present_publisherId) {
      if (!(this_present_publisherId && that_present_publisherId))
        return false;
      if (!this.publisherId.equals(that.publisherId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_edge = true && this.isSetEdge();
    boolean that_present_edge = true && that.isSetEdge();
    if (this_present_edge || that_present_edge) {
      if (!(this_present_edge && that_present_edge))
        return false;
      if (!this.edge.equals(that.edge))
        return false;
    }

    boolean this_present_minS = true && this.isSetMinS();
    boolean that_present_minS = true && that.isSetMinS();
    if (this_present_minS || that_present_minS) {
      if (!(this_present_minS && that_present_minS))
        return false;
      if (this.minS != that.minS)
        return false;
    }

    boolean this_present_maxS = true && this.isSetMaxS();
    boolean that_present_maxS = true && that.isSetMaxS();
    if (this_present_maxS || that_present_maxS) {
      if (!(this_present_maxS && that_present_maxS))
        return false;
      if (this.maxS != that.maxS)
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (!this.experience.equals(that.experience))
        return false;
    }

    boolean this_present_duty = true && this.isSetDuty();
    boolean that_present_duty = true && that.isSetDuty();
    if (this_present_duty || that_present_duty) {
      if (!(this_present_duty && that_present_duty))
        return false;
      if (!this.duty.equals(that.duty))
        return false;
    }

    boolean this_present_lastEdu = true && this.isSetLastEdu();
    boolean that_present_lastEdu = true && that.isSetLastEdu();
    if (this_present_lastEdu || that_present_lastEdu) {
      if (!(this_present_lastEdu && that_present_lastEdu))
        return false;
      if (!this.lastEdu.equals(that.lastEdu))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_requirement = true && this.isSetRequirement();
    boolean that_present_requirement = true && that.isSetRequirement();
    if (this_present_requirement || that_present_requirement) {
      if (!(this_present_requirement && that_present_requirement))
        return false;
      if (!this.requirement.equals(that.requirement))
        return false;
    }

    boolean this_present_welfare = true && this.isSetWelfare();
    boolean that_present_welfare = true && that.isSetWelfare();
    if (this_present_welfare || that_present_welfare) {
      if (!(this_present_welfare && that_present_welfare))
        return false;
      if (!this.welfare.equals(that.welfare))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_orgId = true && (isSetOrgId());
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_pageId = true && (isSetPageId());
    list.add(present_pageId);
    if (present_pageId)
      list.add(pageId);

    boolean present_publisherId = true && (isSetPublisherId());
    list.add(present_publisherId);
    if (present_publisherId)
      list.add(publisherId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_edge = true && (isSetEdge());
    list.add(present_edge);
    if (present_edge)
      list.add(edge);

    boolean present_minS = true && (isSetMinS());
    list.add(present_minS);
    if (present_minS)
      list.add(minS);

    boolean present_maxS = true && (isSetMaxS());
    list.add(present_maxS);
    if (present_maxS)
      list.add(maxS);

    boolean present_experience = true && (isSetExperience());
    list.add(present_experience);
    if (present_experience)
      list.add(experience);

    boolean present_duty = true && (isSetDuty());
    list.add(present_duty);
    if (present_duty)
      list.add(duty);

    boolean present_lastEdu = true && (isSetLastEdu());
    list.add(present_lastEdu);
    if (present_lastEdu)
      list.add(lastEdu);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_requirement = true && (isSetRequirement());
    list.add(present_requirement);
    if (present_requirement)
      list.add(requirement);

    boolean present_welfare = true && (isSetWelfare());
    list.add(present_welfare);
    if (present_welfare)
      list.add(welfare);

    return list.hashCode();
  }

  @Override
  public int compareTo(JobCache other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageId()).compareTo(other.isSetPageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageId, other.pageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisherId()).compareTo(other.isSetPublisherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherId, other.publisherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdge()).compareTo(other.isSetEdge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edge, other.edge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinS()).compareTo(other.isSetMinS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minS, other.minS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxS()).compareTo(other.isSetMaxS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxS, other.maxS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuty()).compareTo(other.isSetDuty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duty, other.duty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastEdu()).compareTo(other.isSetLastEdu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastEdu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastEdu, other.lastEdu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequirement()).compareTo(other.isSetRequirement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirement, other.requirement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWelfare()).compareTo(other.isSetWelfare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelfare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.welfare, other.welfare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobCache(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetOrgId()) {
      if (!first) sb.append(", ");
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
    }
    if (isSetPageId()) {
      if (!first) sb.append(", ");
      sb.append("pageId:");
      if (this.pageId == null) {
        sb.append("null");
      } else {
        sb.append(this.pageId);
      }
      first = false;
    }
    if (isSetPublisherId()) {
      if (!first) sb.append(", ");
      sb.append("publisherId:");
      if (this.publisherId == null) {
        sb.append("null");
      } else {
        sb.append(this.publisherId);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetEdge()) {
      if (!first) sb.append(", ");
      sb.append("edge:");
      if (this.edge == null) {
        sb.append("null");
      } else {
        sb.append(this.edge);
      }
      first = false;
    }
    if (isSetMinS()) {
      if (!first) sb.append(", ");
      sb.append("minS:");
      sb.append(this.minS);
      first = false;
    }
    if (isSetMaxS()) {
      if (!first) sb.append(", ");
      sb.append("maxS:");
      sb.append(this.maxS);
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      if (this.experience == null) {
        sb.append("null");
      } else {
        sb.append(this.experience);
      }
      first = false;
    }
    if (isSetDuty()) {
      if (!first) sb.append(", ");
      sb.append("duty:");
      if (this.duty == null) {
        sb.append("null");
      } else {
        sb.append(this.duty);
      }
      first = false;
    }
    if (isSetLastEdu()) {
      if (!first) sb.append(", ");
      sb.append("lastEdu:");
      if (this.lastEdu == null) {
        sb.append("null");
      } else {
        sb.append(this.lastEdu);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetRequirement()) {
      if (!first) sb.append(", ");
      sb.append("requirement:");
      if (this.requirement == null) {
        sb.append("null");
      } else {
        sb.append(this.requirement);
      }
      first = false;
    }
    if (isSetWelfare()) {
      if (!first) sb.append(", ");
      sb.append("welfare:");
      if (this.welfare == null) {
        sb.append("null");
      } else {
        sb.append(this.welfare);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobCacheStandardSchemeFactory implements SchemeFactory {
    public JobCacheStandardScheme getScheme() {
      return new JobCacheStandardScheme();
    }
  }

  private static class JobCacheStandardScheme extends StandardScheme<JobCache> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobCache struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgId = iprot.readString();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageId = iprot.readString();
              struct.setPageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUBLISHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publisherId = iprot.readString();
              struct.setPublisherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.edge = iprot.readString();
              struct.setEdgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minS = iprot.readI32();
              struct.setMinSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxS = iprot.readI32();
              struct.setMaxSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experience = iprot.readString();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DUTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.duty = iprot.readString();
              struct.setDutyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_EDU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastEdu = iprot.readString();
              struct.setLastEduIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUIREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requirement = iprot.readString();
              struct.setRequirementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WELFARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.welfare = iprot.readString();
              struct.setWelfareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobCache struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgId != null) {
        if (struct.isSetOrgId()) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageId != null) {
        if (struct.isSetPageId()) {
          oprot.writeFieldBegin(PAGE_ID_FIELD_DESC);
          oprot.writeString(struct.pageId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publisherId != null) {
        if (struct.isSetPublisherId()) {
          oprot.writeFieldBegin(PUBLISHER_ID_FIELD_DESC);
          oprot.writeString(struct.publisherId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.edge != null) {
        if (struct.isSetEdge()) {
          oprot.writeFieldBegin(EDGE_FIELD_DESC);
          oprot.writeString(struct.edge);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinS()) {
        oprot.writeFieldBegin(MIN_S_FIELD_DESC);
        oprot.writeI32(struct.minS);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxS()) {
        oprot.writeFieldBegin(MAX_S_FIELD_DESC);
        oprot.writeI32(struct.maxS);
        oprot.writeFieldEnd();
      }
      if (struct.experience != null) {
        if (struct.isSetExperience()) {
          oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
          oprot.writeString(struct.experience);
          oprot.writeFieldEnd();
        }
      }
      if (struct.duty != null) {
        if (struct.isSetDuty()) {
          oprot.writeFieldBegin(DUTY_FIELD_DESC);
          oprot.writeString(struct.duty);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastEdu != null) {
        if (struct.isSetLastEdu()) {
          oprot.writeFieldBegin(LAST_EDU_FIELD_DESC);
          oprot.writeString(struct.lastEdu);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requirement != null) {
        if (struct.isSetRequirement()) {
          oprot.writeFieldBegin(REQUIREMENT_FIELD_DESC);
          oprot.writeString(struct.requirement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.welfare != null) {
        if (struct.isSetWelfare()) {
          oprot.writeFieldBegin(WELFARE_FIELD_DESC);
          oprot.writeString(struct.welfare);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobCacheTupleSchemeFactory implements SchemeFactory {
    public JobCacheTupleScheme getScheme() {
      return new JobCacheTupleScheme();
    }
  }

  private static class JobCacheTupleScheme extends TupleScheme<JobCache> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobCache struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOrgId()) {
        optionals.set(1);
      }
      if (struct.isSetPageId()) {
        optionals.set(2);
      }
      if (struct.isSetPublisherId()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetEdge()) {
        optionals.set(5);
      }
      if (struct.isSetMinS()) {
        optionals.set(6);
      }
      if (struct.isSetMaxS()) {
        optionals.set(7);
      }
      if (struct.isSetExperience()) {
        optionals.set(8);
      }
      if (struct.isSetDuty()) {
        optionals.set(9);
      }
      if (struct.isSetLastEdu()) {
        optionals.set(10);
      }
      if (struct.isSetDesc()) {
        optionals.set(11);
      }
      if (struct.isSetRequirement()) {
        optionals.set(12);
      }
      if (struct.isSetWelfare()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetOrgId()) {
        oprot.writeString(struct.orgId);
      }
      if (struct.isSetPageId()) {
        oprot.writeString(struct.pageId);
      }
      if (struct.isSetPublisherId()) {
        oprot.writeString(struct.publisherId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEdge()) {
        oprot.writeString(struct.edge);
      }
      if (struct.isSetMinS()) {
        oprot.writeI32(struct.minS);
      }
      if (struct.isSetMaxS()) {
        oprot.writeI32(struct.maxS);
      }
      if (struct.isSetExperience()) {
        oprot.writeString(struct.experience);
      }
      if (struct.isSetDuty()) {
        oprot.writeString(struct.duty);
      }
      if (struct.isSetLastEdu()) {
        oprot.writeString(struct.lastEdu);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetRequirement()) {
        oprot.writeString(struct.requirement);
      }
      if (struct.isSetWelfare()) {
        oprot.writeString(struct.welfare);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobCache struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgId = iprot.readString();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageId = iprot.readString();
        struct.setPageIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.publisherId = iprot.readString();
        struct.setPublisherIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.edge = iprot.readString();
        struct.setEdgeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.minS = iprot.readI32();
        struct.setMinSIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxS = iprot.readI32();
        struct.setMaxSIsSet(true);
      }
      if (incoming.get(8)) {
        struct.experience = iprot.readString();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.duty = iprot.readString();
        struct.setDutyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastEdu = iprot.readString();
        struct.setLastEduIsSet(true);
      }
      if (incoming.get(11)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requirement = iprot.readString();
        struct.setRequirementIsSet(true);
      }
      if (incoming.get(13)) {
        struct.welfare = iprot.readString();
        struct.setWelfareIsSet(true);
      }
    }
  }

}

